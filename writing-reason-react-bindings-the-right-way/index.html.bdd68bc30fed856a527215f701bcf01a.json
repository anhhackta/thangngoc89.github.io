{"head":{"layout":"Post","title":"Writing ReasonReact bindings \"the right way\"","date":"2018-01-23T07:00:00.000Z","route":"writing-reason-react-bindings-the-right-way","tags":["reasonml","reason-react"],"description":"In this post, I'll show you how to write ReasonReact bindings for React.js components. For all of you who don't know about ReasonML:…"},"body":"<p>In this post, I'll show you how to write ReasonReact bindings for React.js components.</p>\n<blockquote>\n<p>For all of you who don't know about ReasonML: ReasonML is syntactic sugar on top of the OCaml toolchain.</p>\n<p>ReasonML/OCaml can be compiled into optimized Javascript with <a href=\"https://bucklescript.github.io/\">Bucklescript</a>.</p>\n<p>You can learn more about it by checking out this article by\nDr. Axel Rauschmayer: <a href=\"http://2ality.com/2017/11/about-reasonml.html\">What is ReasonML?</a></p>\n</blockquote>\n<h1 id=\"the-official-way-according-to-the-docs\"><a href=\"#the-official-way-according-to-the-docs\" class=\"phenomic-HeadingAnchor\">#</a>The official way according to the docs</h1>\n<p>ReasonReact provides a great way to inteprop with React.js components using <code>ReasonReact.wrapJsForReason</code>. Here is <a href=\"https://reasonml.github.io/reason-react/docs/en/interop.html#reasonreact-using-reactjs\">an example from the ReasonReact docs:</a></p>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-comment\">/* PersonalInformation.re */</span>\n[@<span class=\"hljs-keyword\">bs.module] </span><span class=\"hljs-keyword\">external </span><span class=\"hljs-keyword\">jsPersonalInformation </span>: ReasonReact.reactClass = <span class=\"hljs-string\">\"./PersonalInformation.js\"</span><span class=\"hljs-comment\">;</span>\n\nlet make = (~name: string, ~age: option(int)=?, children) =>\n  ReasonReact.wrapJsForReason(\n    ~reactClass=<span class=\"hljs-keyword\">jsPersonalInformation,\n</span>    ~props={\n      <span class=\"hljs-string\">\"name\"</span>: name,\n      <span class=\"hljs-string\">\"age\"</span>: <span class=\"hljs-keyword\">Js.Nullable.from_opt(age)\n</span>    },\n    children\n  )<span class=\"hljs-comment\">;</span></code></pre>\n<p>Now we'll use the above component like this:</p>\n<pre><code class=\"hljs language-reason\">&#x3C;PersonalInformation <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-string\">\"Khoa Nguyen\"</span> <span class=\"hljs-attribute\">age</span>=Some(24) /></code></pre>\n<p><code>PersonalInformation.js</code> should be called with these props:</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Khoa Nguyen\"</span>;\n  age: <span class=\"hljs-number\">24</span>;\n}</code></pre>\n<p>Everything is working as expected. Now let's try with slightly different props:</p>\n<pre><code class=\"hljs language-reason\">&#x3C;PersonalInformation <span class=\"hljs-attribute\">name</span>=<span class=\"hljs-string\">\"Khoa Nguyen\"</span> <span class=\"hljs-attribute\">age</span>=None /></code></pre>\n<p><code>PersonalInformation.js</code> should be called with these props:</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Khoa Nguyen\"</span>;\n  age: <span class=\"hljs-literal\">undefined</span>;\n}</code></pre>\n<p><code>age</code> now has an <code>undefined</code> value. It's not so bad in most cases, but it could problematic.</p>\n<p>Here is how I implemented my <code>PersonalInformation.js</code> component:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// PersonalInformation.js</span>\n<span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-keyword\">const</span> PersonalInformation = <span class=\"hljs-function\"><span class=\"hljs-params\">props</span> =></span> {\n  <span class=\"hljs-keyword\">let</span> hasAge = props.hasOwnProperty(<span class=\"hljs-string\">\"age\"</span>);\n\n  <span class=\"hljs-keyword\">if</span> (hasAge) {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>\n        My name is {props.name}. I'm {props.age} years old\n      <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>\n    );\n  }\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">p</span>></span>My name is {props.name}<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">p</span>></span></span>;\n};\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> PersonalInformation;</code></pre>\n<p>I've created a CodeSandbox <a href=\"https://codesandbox.io/s/9zqznp0mq4\">here</a> for you to play around with.</p>\n<p>With the the first example (<code>~age=Some(24)</code>), it renders <strong>My name is Khoa Nguyen. I'm 24 years old</strong> as expected.</p>\n<p>With the second example (<code>~age=None</code>), however, it renders <strong>My name is Khoa Nguyen. I'm years old</strong>.</p>\n<p>What is going on?</p>\n<p>Let's open the node repl and try it out:</p>\n<pre><code class=\"hljs language-js\">❯ node\n> <span class=\"hljs-keyword\">let</span> firstExample = {<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Khoa Nguyen\"</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">24</span>};\n<span class=\"hljs-literal\">undefined</span>\n> firstExample.hasOwnProperty(<span class=\"hljs-string\">\"age\"</span>)\n<span class=\"hljs-literal\">true</span>\n> <span class=\"hljs-keyword\">let</span> secondExample = {<span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Khoa Nguyen\"</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-literal\">undefined</span>};\n<span class=\"hljs-literal\">undefined</span>\n> secondExample.hasOwnProperty(<span class=\"hljs-string\">\"age\"</span>)\n<span class=\"hljs-literal\">true</span>\n> <span class=\"hljs-string\">\"age\"</span> <span class=\"hljs-keyword\">in</span> secondExample\n<span class=\"hljs-literal\">true</span>  </code></pre>\n<p>Ah. This totally makes sense. The <code>age</code> property has a value of <code>undefined</code>.</p>\n<p>Quick note:</p>\n<p>I know that the above code is not idiomatic React code. I can re-implement the React compponent like this to fix it:</p>\n<pre><code class=\"hljs language-js\">&#x3C;p>\n  My name is {props.name}.\n  {props.age &#x26;&#x26; <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">span</span>></span>I'm {props.age} years old<span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">span</span>></span></span>}\n&#x3C;<span class=\"hljs-regexp\">/p></span></code></pre>\n<p>This should work even with <code>age = undefined</code>, but the fact that I have to change the original component to write a binding isn't ideal. The pattern I use here (<code>props.hasOwnPropty(\"age\")</code>) is common for switching between controlled/uncontrolled mode of a component.</p>\n<h1 id=\"the-right-way-of-writing-reasonreact-bindings\"><a href=\"#the-right-way-of-writing-reasonreact-bindings\" class=\"phenomic-HeadingAnchor\">#</a>\"The right way\" of writing ReasonReact bindings</h1>\n<p>Now we've identified our problem, let's fix it.</p>\n<p>We need to find a way for not defining <code>age</code> in props.</p>\n<p>Lucky for us, Bucklescript provides a function called the <a href=\"https://bucklescript.github.io/docs/en/object.html#special-creation-function\"><strong>Special Creation Function</strong></a></p>\n<p>The idea is simple:</p>\n<pre><code class=\"hljs language-reason\">[@bs.obj] external makeProps : (~name: string, ~age: <span class=\"hljs-attribute\">int</span>=?, unit) => _ = <span class=\"hljs-string\">\"\"</span>;\n\nlet props1 = makeProps(~<span class=\"hljs-attribute\">name</span>=<span class=\"hljs-string\">\"Khoa Nguyen\"</span>, ~<span class=\"hljs-attribute\">age</span>=24, ());\nlet props2 = makeProps(~<span class=\"hljs-attribute\">name</span>=<span class=\"hljs-string\">\"Khoa Nguyen\"</span>, ());</code></pre>\n<blockquote>\n<p>Tips: You can try this on the playground at <a href=\"https://reasonml.github.io/en/try.html\">https://reasonml.github.io/en/try.html</a></p>\n</blockquote>\n<p>This is the compiled code from Bucklescript:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> props1 = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Khoa Nguyen\"</span>,\n  <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">24</span>,\n};\n\n<span class=\"hljs-keyword\">var</span> props2 = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">\"Khoa Nguyen\"</span>,\n};</code></pre>\n<p>As you can see, Bucklescript creates an object for us so no intermediate step is needed, and the <code>age</code> property is not in <code>props2</code>.</p>\n<p>With this knowledge, we can rewrite our binding like this:</p>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-comment\">/* PersonalInformation.re */</span>\n[@<span class=\"hljs-keyword\">bs.module] </span><span class=\"hljs-keyword\">external </span><span class=\"hljs-keyword\">jsPersonalInformation </span>: ReasonReact.reactClass = <span class=\"hljs-string\">\"./PersonalInformation.js\"</span><span class=\"hljs-comment\">;</span>\n\n[@<span class=\"hljs-keyword\">bs.obj] </span><span class=\"hljs-keyword\">external </span>makeProps : (~name: string, ~age: int=?, unit) => _ = <span class=\"hljs-string\">\"\"</span><span class=\"hljs-comment\">;</span>\n\nlet make = (~name, ~age=?, children) =>\n  ReasonReact.wrapJsForReason(\n    ~reactClass=<span class=\"hljs-keyword\">jsPersonalInformation,\n</span>    ~props=makeProps(~name, ~age?, ()),\n    children\n  )<span class=\"hljs-comment\">;</span></code></pre>\n<p>As you can see, I removed the type annotations in <code>make</code> and put them in <code>makeProps</code>. It's not necessary to annotate types everywhere with a great compiler. Now, our binding works as expected.</p>\n<h1 id=\"transform-props\"><a href=\"#transform-props\" class=\"phenomic-HeadingAnchor\">#</a>Transform props</h1>\n<p>The above is a simple case. We sometimes need to apply some transformations to the props before passing them to React.js.\nA common case might be transforming between <code>Js.boolean</code> and ReasonML's boolean.</p>\n<p>Here is a small snippet on how you can do that:</p>\n<pre><code class=\"hljs language-reason\"><span class=\"hljs-comment\">/* PersonalInformation.re */</span>\n[@<span class=\"hljs-keyword\">bs.module] </span><span class=\"hljs-keyword\">external </span><span class=\"hljs-keyword\">jsPersonalInformation </span>: ReasonReact.reactClass = <span class=\"hljs-string\">\"./PersonalInformation.js\"</span><span class=\"hljs-comment\">;</span>\n\n[@<span class=\"hljs-keyword\">bs.obj] </span><span class=\"hljs-keyword\">external </span>makeProps : (\n ~name: string,\n ~age: int=?,\n ~<span class=\"hljs-keyword\">showAge: </span><span class=\"hljs-keyword\">Js.boolean=?,\n</span> unit\n) => _ = <span class=\"hljs-string\">\"\"</span><span class=\"hljs-comment\">;</span>\n\nlet make = (~name, ~age=?, <span class=\"hljs-keyword\">showAge=?, </span>children) =>\n ReasonReact.wrapJsForReason(\n   ~reactClass=<span class=\"hljs-keyword\">jsPersonalInformation,\n</span>   ~props=makeProps(\n     ~name,\n     ~age?,\n     ~<span class=\"hljs-keyword\">showAge=?Js.Option.map([@bs] </span>(a => <span class=\"hljs-keyword\">Js.Boolean.to_js_boolean(a)), </span><span class=\"hljs-keyword\">showAge),\n</span>     ()\n    ),\n   children\n )<span class=\"hljs-comment\">;</span></code></pre>\n<p>You can use this to make your code more idiomatic ReasonML by replacing string enums with polymorphic variants:</p>\n<pre><code class=\"hljs language-reason\">[@bs.deriving jsConverter]<span class=\"hljs-built_in\">\ntype </span>theme = [\n  | `dark\n  | `light\n];\n\n[@bs.obj] external makeProps : (\n ~name: string,\n ~age: <span class=\"hljs-attribute\">int</span>=?,\n ~theme: <span class=\"hljs-attribute\">string</span>=?,\n unit\n) => _ = <span class=\"hljs-string\">\"\"</span>;\n\nlet make = (~name, ~<span class=\"hljs-attribute\">age</span>=?, <span class=\"hljs-attribute\">theme</span>=?, children) =>\n ReasonReact.wrapJsForReason(\n   ~<span class=\"hljs-attribute\">reactClass</span>=jsPersonalInformation,\n   ~<span class=\"hljs-attribute\">props</span>=makeProps(\n     ~name,\n     ~age?,\n     ~<span class=\"hljs-attribute\">theme</span>=?Js.Option.map([@bs] (a => themeToJs(a)), theme),\n     ()\n    ),\n   children\n );</code></pre>\n<p>I think this is enough for this blog post. If you want to see more example of the pattern on writing ReasonReact binding, checkout my Ant Design binding here: <a href=\"https://github.com/thangngoc89/bs-ant-design\">https://github.com/thangngoc89/bs-ant-design</a></p>\n<p>This is my first time writing a blog post in English, so please let me know If I wrote anything that's incorrect.</p>\n<hr>\n<p>Update <strong>3/16/2018</strong>: If you're having troubles running the code in the example, you could try with <a href=\"https://github.com/idkjs/binding-rr-demo#babel-for-jsx\">this repository</a></p>\n<hr>\n<p>You can reach me via Twitter(<a href=\"https://twitter.com/thangngoc89\">@thangngoc89</a>) or <strong>@thangngoc89</strong> on Discord channel.</p>\n","__filename":"writing-reason-react-bindings-the-right-way/index.md","__url":"/writing-reason-react-bindings-the-right-way/","__resourceUrl":"/writing-reason-react-bindings-the-right-way/index.html","__dataUrl":"/writing-reason-react-bindings-the-right-way/index.html.bdd68bc30fed856a527215f701bcf01a.json"}