{"head":{"layout":"Post","title":"Cài đặt và thiết lập cơ bản cho Larask Gist","date":"2015-03-12T18:00:00.000Z","description":"Hướng dẫn cài đặt Laravel 5 và thiết lập cơ bản cho ứng dụng","tags":["laravel"]},"body":"<p>Đây là bài viết trong <a href=\"/gioi-thieu-series-larask-gist/\">series Larask Gist</a>.\nToàn bộ source code của bài viết này bạn có thể xem tại đây: <a href=\"https://github.com/Larask/gist/\">Larask Gist</a></p>\n<h1 id=\"Cai-dat\"><a class=\"markdownIt-Anchor\" href=\"#Cai-dat\">#</a> Cài đặt</h1>\n<p>Trong series này mình sẽ dùng Laragon để hướng dẫn. Vì vậy nếu bạn nào chưa cài đặt Laragon hãy <a href=\"/laragon-cai-dat-laravel-trong-mot-phut/\">cài đặt ngay theo hướng dẫn</a>. (nếu máy bạn đủ khả năng ảo hóa, hãy sử dụng Homestead thay thế)</p>\n<p>Dùng Laragon tạo một project mới tên là <code>gist</code>. Chờ để Laragon (thực tế là composer) tải và cài đặt Laravel. Mở trình duyệt và truy cập vào <code>gist.dev</code>. Nếu xuất hiện màn hinh chào mừng của Laravel là bạn đã thành công.</p>\n<p><img src=\"/images/2015-12-03-larask-gist-cai-dat-va-cau-hinh-co-ban/welcome-laravel.jpg\" alt=\"Welcome to Laravel\"></p>\n<h1 id=\"Cau-hinh-co-ban\"><a class=\"markdownIt-Anchor\" href=\"#Cau-hinh-co-ban\">#</a> Cấu hình cơ bản</h1>\n<h2 id=\"Doi-ten-app-namespace\"><a class=\"markdownIt-Anchor\" href=\"#Doi-ten-app-namespace\">#</a> Đổi tên app (namespace)</h2>\n<p>Việc đầu tiên cần làm sau khi cài ứng dụng là đổi tên. Thay vì sử dụng tên mặc định là <code>App</code> chúng ta sẽ đổi nó thành <code>Gist</code></p>\n<pre><code class=\"language-shell\">php artisan app:<span class=\"hljs-built_in\">name</span> Gist</code></pre>\n<pre><code class=\"language-shell\">Application <span class=\"hljs-built_in\">name</span> <span class=\"hljs-keyword\">set</span>!</code></pre>\n<p>Từ bây giờ, toàn bộ ứng dụng của chúng ta sẽ có namespace là <code>Gist</code></p>\n<h3 id=\"Cau-hinh-cac-thong-so\"><a class=\"markdownIt-Anchor\" href=\"#Cau-hinh-cac-thong-so\">#</a> Cấu hình các thông số</h3>\n<p>Ngày nay, git là version control thông dụng. Và bạn sẽ không muốn các thông tin như cấu hình database, mật khẩu, API key được công khai (ví dụ trên Github hay Bitbucket khi push code). Và bạn cũng không muốn phải sửa các thông số này thường xuyên khi deploy ứng dụng do sự khác nhau giữa các môi trường làm việc (ví dụ local và production).</p>\n<p>Laravel tích hợp sẵn <code>.dotenv</code> để giúp bạn làm thực hiện việc này dễ dàng nhất. Mỗi mỗi trường sẽ có 1 file <code>.env</code> ở thư mục gốc lưu các thông tin quan trọng.</p>\n<p>Cách hoạt động của file <code>.env</code> rất đơn giản. Hãy mở file <code>/config/database.php</code> các bạn sẽ thấy dòng này :</p>\n<pre><code class=\"language-php\"><span class=\"hljs-string\">'mysql'</span> =&gt; [\n  <span class=\"hljs-string\">'driver'</span>    =&gt; <span class=\"hljs-string\">'mysql'</span>,\n  <span class=\"hljs-string\">'host'</span>      =&gt; env(<span class=\"hljs-string\">'DB_HOST'</span>, <span class=\"hljs-string\">'localhost'</span>),\n  <span class=\"hljs-string\">'database'</span>  =&gt; env(<span class=\"hljs-string\">'DB_DATABASE'</span>, <span class=\"hljs-string\">'forge'</span>),\n  <span class=\"hljs-string\">'username'</span>  =&gt; env(<span class=\"hljs-string\">'DB_USERNAME'</span>, <span class=\"hljs-string\">'forge'</span>),\n  <span class=\"hljs-string\">'password'</span>  =&gt; env(<span class=\"hljs-string\">'DB_PASSWORD'</span>, <span class=\"hljs-string\">''</span>),\n  <span class=\"hljs-string\">'charset'</span>   =&gt; <span class=\"hljs-string\">'utf8'</span>,\n  <span class=\"hljs-string\">'collation'</span> =&gt; <span class=\"hljs-string\">'utf8_unicode_ci'</span>,\n  <span class=\"hljs-string\">'prefix'</span>    =&gt; <span class=\"hljs-string\">''</span>,\n  <span class=\"hljs-string\">'strict'</span>    =&gt; <span class=\"hljs-keyword\">false</span>,\n],</code></pre>\n<p>File <code>.env</code> đi kèm sau khi cài Laravel thành công sẽ có nội dung như sau:</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attr\">APP_ENV</span>=local\n<span class=\"hljs-attr\">APP_DEBUG</span>=<span class=\"hljs-literal\">true</span>\n<span class=\"hljs-attr\">APP_KEY</span>=rTPeTeKYrhiu61RyvFeyGkbZF2KS2Fe2\n\n<span class=\"hljs-attr\">DB_HOST</span>=localhost\n<span class=\"hljs-attr\">DB_DATABASE</span>=homestead\n<span class=\"hljs-attr\">DB_USERNAME</span>=homestead\n<span class=\"hljs-attr\">DB_PASSWORD</span>=secret\n\n<span class=\"hljs-attr\">CACHE_DRIVER</span>=file\n<span class=\"hljs-attr\">SESSION_DRIVER</span>=file</code></pre>\n<p><em>Lưu ý: Luôn luôn giữ bí mật APP_KEY của bạn</em></p>\n<p>Laravel dùng hàm <code>env('DB_HOST', 'localhost')</code> để lấy giá trị <code>DB_HOST</code> trong file <code>.env</code>. Nếu không có giá trị này,  giá trị mặc định là <code>localhost</code> sẽ được dùng. Các bạn có thể bỏ trống biến thứ 2 của hàm <code>env</code> và khi đó giá trị mặc định trả về sẽ là <code>null</code></p>\n<pre><code class=\"language-php\"><span class=\"hljs-comment\">/**\n * Gets the value of an environment variable. Supports boolean, empty and null.\n *\n * <span class=\"hljs-doctag\">@param</span>  string  $key\n * <span class=\"hljs-doctag\">@param</span>  mixed   $default\n * <span class=\"hljs-doctag\">@return</span> mixed\n */</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">env</span><span class=\"hljs-params\">($key, $default = null)</span> </span>{\n  <span class=\"hljs-comment\">// some thing here</span>\n}</code></pre>\n<p>Trong file <code>.env</code> chúng ta sẽ cấu hình các mục</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-attr\">DB_HOST</span>=localhost\n<span class=\"hljs-attr\">DB_DATABASE</span>=gist\n<span class=\"hljs-attr\">DB_USERNAME</span>=root\n<span class=\"hljs-attr\">DB_PASSWORD</span>=</code></pre>\n<p>Phù hợp với cấu hình mysql của bạn. (nếu bạn sử dụng PostgreSQL, SQLite,…) Hãy thay đổi <code>default</code> cho phù hợp trong <code>config/database.php</code></p>\n<p>Kiểm tra kết nối database thành công bằng cách chạy lệnh sau vào Cmder</p>\n<pre><code class=\"language-shell\">php artisan tinker\n<span class=\"hljs-meta\">&gt;&gt;</span>&gt; DB::Statement(<span class=\"hljs-string\">\"SHOW TABLES\"</span>)\n<span class=\"hljs-literal\">true</span></code></pre>\n<p><em>Lưu ý: <code>SHOW TABLES</code> là câu lệnh của MySQL để hiển thị tất cả table trong database hiện tại (gist), nếu các bạn sử dụng các loại database khác. Câu lệnh này phải được thay đổi cho phù hợp</em></p>\n<pre><code class=\"language-php\">DB::Statement($command)</code></pre>\n<p>Dùng để chạy một câu query.</p>\n<h3 id=\"Cai-ide-helper-package\"><a class=\"markdownIt-Anchor\" href=\"#Cai-ide-helper-package\">#</a> Cài ide-helper package</h3>\n<p>Để các IDE có thể “hiểu” được những gì chúng ta đang code và có các type hint thì chúng ta cần cài package hỗ trợ. Ở đây mình sẽ dùng <a href=\"https://github.com/barryvdh/laravel-ide-helper\">barryvdh/laravel-ide-helper</a> .</p>\n<p>Trong Cmder:</p>\n<pre><code class=\"language-shell\"><span class=\"hljs-symbol\">composer</span> <span class=\"hljs-meta\">require</span> <span class=\"hljs-keyword\">barryvdh/laravel-ide-helper </span>--dev</code></pre>\n<p>Option --dev để composer hiểu chúng ta chỉ cần package này khi develop.</p>\n<p>Mở file <code>'Gist\\Providers\\AppServiceProvider'</code> trong method <code>register()</code> chúng ta sẽ thêm vào :</p>\n<pre><code class=\"language-php\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">$this</span>-&gt;app-&gt;environment() == <span class=\"hljs-string\">'local'</span>) {\n  <span class=\"hljs-keyword\">$this</span>-&gt;app-&gt;register(<span class=\"hljs-string\">'Barryvdh\\LaravelIdeHelper\\IdeHelperServiceProvider'</span>);\n}</code></pre>\n<p>Tiếp tục trong Cmder:</p>\n<pre><code class=\"language-shell\">php artisan ide-helper:<span class=\"hljs-keyword\">generate</span></code></pre>\n<p>Lệnh trên sẽ tạo file _ide_helpers.php trong thư mục gốc giúp các IDE có thể hiểu được Laravel.\nBạn cần phải chạy lệnh trên mỗi lần cài đặt thêm package mới.\nNhưng bạn cài đặt package bằng Composer phải không?\nHãy để Composer làm điểu đó cho bạn.</p>\n<p>Mở file <code>composer.json</code> và sửa <code>post-update-cmd</code> giống như bạn dưới (chính xác thứ tự các dòng nhé)</p>\n<pre><code class=\"language-javascript\"><span class=\"hljs-string\">\"post-update-cmd\"</span>:[\n  <span class=\"hljs-string\">\"php artisan clear-compiled\"</span>,\n  <span class=\"hljs-string\">\"php artisan ide-helper:generate\"</span>,\n  <span class=\"hljs-string\">\"php artisan optimize\"</span>\n]</code></pre>\n<p>Cuối cùng là add file <code>_ide_helper.php</code> vào cuối file <code>.gitignore</code>  để cho git không theo dõi file này, tránh các rắc rối về commit/merge về sau.</p>\n<h1 id=\"Ket-luan\"><a class=\"markdownIt-Anchor\" href=\"#Ket-luan\">#</a> Kết luận</h1>\n<p>Nếu bạn đọc được đến đây thì bạn đã sẵn sàng để chinh phục Laravel rồi đấy.</p>\n","rawBody":"\nĐây là bài viết trong [series Larask Gist](/gioi-thieu-series-larask-gist/).\nToàn bộ source code của bài viết này bạn có thể xem tại đây: [Larask Gist](https://github.com/Larask/gist/)\n\n# Cài đặt\n\nTrong series này mình sẽ dùng Laragon để hướng dẫn. Vì vậy nếu bạn nào chưa cài đặt Laragon hãy [cài đặt ngay theo hướng dẫn](/laragon-cai-dat-laravel-trong-mot-phut/). (nếu máy bạn đủ khả năng ảo hóa, hãy sử dụng Homestead thay thế)\n\nDùng Laragon tạo một project mới tên là `gist`. Chờ để Laragon (thực tế là composer) tải và cài đặt Laravel. Mở trình duyệt và truy cập vào `gist.dev`. Nếu xuất hiện màn hinh chào mừng của Laravel là bạn đã thành công.\n\n![Welcome to Laravel](/images/2015-12-03-larask-gist-cai-dat-va-cau-hinh-co-ban/welcome-laravel.jpg)\n\n# Cấu hình cơ bản\n\n## Đổi tên app (namespace)\n\nViệc đầu tiên cần làm sau khi cài ứng dụng là đổi tên. Thay vì sử dụng tên mặc định là `App` chúng ta sẽ đổi nó thành `Gist`\n\n```shell\nphp artisan app:name Gist\n```\n\n```shell\nApplication name set!\n```\n\nTừ bây giờ, toàn bộ ứng dụng của chúng ta sẽ có namespace là `Gist`\n\n### Cấu hình các thông số\n\nNgày nay, git là version control thông dụng. Và bạn sẽ không muốn các thông tin như cấu hình database, mật khẩu, API key được công khai (ví dụ trên Github hay Bitbucket khi push code). Và bạn cũng không muốn phải sửa các thông số này thường xuyên khi deploy ứng dụng do sự khác nhau giữa các môi trường làm việc (ví dụ local và production).\n\nLaravel tích hợp sẵn `.dotenv` để giúp bạn làm thực hiện việc này dễ dàng nhất. Mỗi mỗi trường sẽ có 1 file `.env` ở thư mục gốc lưu các thông tin quan trọng.\n\nCách hoạt động của file `.env` rất đơn giản. Hãy mở file `/config/database.php` các bạn sẽ thấy dòng này :\n\n```php\n'mysql' => [\n  'driver'    => 'mysql',\n  'host'      => env('DB_HOST', 'localhost'),\n  'database'  => env('DB_DATABASE', 'forge'),\n  'username'  => env('DB_USERNAME', 'forge'),\n  'password'  => env('DB_PASSWORD', ''),\n  'charset'   => 'utf8',\n  'collation' => 'utf8_unicode_ci',\n  'prefix'    => '',\n  'strict'    => false,\n],\n```\n\nFile `.env` đi kèm sau khi cài Laravel thành công sẽ có nội dung như sau:\n\n```shell\nAPP_ENV=local\nAPP_DEBUG=true\nAPP_KEY=rTPeTeKYrhiu61RyvFeyGkbZF2KS2Fe2\n\nDB_HOST=localhost\nDB_DATABASE=homestead\nDB_USERNAME=homestead\nDB_PASSWORD=secret\n\nCACHE_DRIVER=file\nSESSION_DRIVER=file\n```\n\n*Lưu ý: Luôn luôn giữ bí mật APP_KEY của bạn*\n\nLaravel dùng hàm `env('DB_HOST', 'localhost')` để lấy giá trị `DB_HOST` trong file `.env`. Nếu không có giá trị này,  giá trị mặc định là `localhost` sẽ được dùng. Các bạn có thể bỏ trống biến thứ 2 của hàm `env` và khi đó giá trị mặc định trả về sẽ là `null`\n\n```php\n/**\n * Gets the value of an environment variable. Supports boolean, empty and null.\n *\n * @param  string  $key\n * @param  mixed   $default\n * @return mixed\n */\nfunction env($key, $default = null) {\n  // some thing here\n}\n```\n\nTrong file `.env` chúng ta sẽ cấu hình các mục\n\n```shell\nDB_HOST=localhost\nDB_DATABASE=gist\nDB_USERNAME=root\nDB_PASSWORD=\n```\n\nPhù hợp với cấu hình mysql của bạn. (nếu bạn sử dụng PostgreSQL, SQLite,...) Hãy thay đổi `default` cho phù hợp trong `config/database.php`\n\nKiểm tra kết nối database thành công bằng cách chạy lệnh sau vào Cmder\n\n```shell\nphp artisan tinker\n>>> DB::Statement(\"SHOW TABLES\")\ntrue\n```\n\n*Lưu ý: `SHOW TABLES` là câu lệnh của MySQL để hiển thị tất cả table trong database hiện tại (gist), nếu các bạn sử dụng các loại database khác. Câu lệnh này phải được thay đổi cho phù hợp*\n\n```php\nDB::Statement($command)\n```\n\nDùng để chạy một câu query.\n\n### Cài ide-helper package\n\nĐể các IDE có thể \"hiểu\" được những gì chúng ta đang code và có các type hint thì chúng ta cần cài package hỗ trợ. Ở đây mình sẽ dùng [barryvdh/laravel-ide-helper](https://github.com/barryvdh/laravel-ide-helper) .\n\nTrong Cmder:\n\n```shell\ncomposer require barryvdh/laravel-ide-helper --dev\n```\n\nOption --dev để composer hiểu chúng ta chỉ cần package này khi develop.\n\nMở file `'Gist\\Providers\\AppServiceProvider'` trong method `register()` chúng ta sẽ thêm vào :\n\n```php\nif ($this->app->environment() == 'local') {\n  $this->app->register('Barryvdh\\LaravelIdeHelper\\IdeHelperServiceProvider');\n}\n```\n\nTiếp tục trong Cmder:\n\n```shell\nphp artisan ide-helper:generate\n```\n\nLệnh trên sẽ tạo file _ide_helpers.php trong thư mục gốc giúp các IDE có thể hiểu được Laravel.\nBạn cần phải chạy lệnh trên mỗi lần cài đặt thêm package mới.\nNhưng bạn cài đặt package bằng Composer phải không?\nHãy để Composer làm điểu đó cho bạn.\n\nMở file `composer.json` và sửa `post-update-cmd` giống như bạn dưới (chính xác thứ tự các dòng nhé)\n\n```javascript\n\"post-update-cmd\":[\n  \"php artisan clear-compiled\",\n  \"php artisan ide-helper:generate\",\n  \"php artisan optimize\"\n]\n```\n\nCuối cùng là add file `_ide_helper.php` vào cuối file `.gitignore`  để cho git không theo dõi file này, tránh các rắc rối về commit/merge về sau.\n\n# Kết luận\n\nNếu bạn đọc được đến đây thì bạn đã sẵn sàng để chinh phục Laravel rồi đấy.\n","raw":"---\nlayout: Post\ntitle: ! 'Cài đặt và thiết lập cơ bản cho Larask Gist'\ndate:   2015-03-12 18:00:00\ndescription: ! 'Hướng dẫn cài đặt Laravel 5 và thiết lập cơ bản cho ứng dụng'\ntags: [laravel]\n---\n\nĐây là bài viết trong [series Larask Gist](/gioi-thieu-series-larask-gist/).\nToàn bộ source code của bài viết này bạn có thể xem tại đây: [Larask Gist](https://github.com/Larask/gist/)\n\n# Cài đặt\n\nTrong series này mình sẽ dùng Laragon để hướng dẫn. Vì vậy nếu bạn nào chưa cài đặt Laragon hãy [cài đặt ngay theo hướng dẫn](/laragon-cai-dat-laravel-trong-mot-phut/). (nếu máy bạn đủ khả năng ảo hóa, hãy sử dụng Homestead thay thế)\n\nDùng Laragon tạo một project mới tên là `gist`. Chờ để Laragon (thực tế là composer) tải và cài đặt Laravel. Mở trình duyệt và truy cập vào `gist.dev`. Nếu xuất hiện màn hinh chào mừng của Laravel là bạn đã thành công.\n\n![Welcome to Laravel](/images/2015-12-03-larask-gist-cai-dat-va-cau-hinh-co-ban/welcome-laravel.jpg)\n\n# Cấu hình cơ bản\n\n## Đổi tên app (namespace)\n\nViệc đầu tiên cần làm sau khi cài ứng dụng là đổi tên. Thay vì sử dụng tên mặc định là `App` chúng ta sẽ đổi nó thành `Gist`\n\n```shell\nphp artisan app:name Gist\n```\n\n```shell\nApplication name set!\n```\n\nTừ bây giờ, toàn bộ ứng dụng của chúng ta sẽ có namespace là `Gist`\n\n### Cấu hình các thông số\n\nNgày nay, git là version control thông dụng. Và bạn sẽ không muốn các thông tin như cấu hình database, mật khẩu, API key được công khai (ví dụ trên Github hay Bitbucket khi push code). Và bạn cũng không muốn phải sửa các thông số này thường xuyên khi deploy ứng dụng do sự khác nhau giữa các môi trường làm việc (ví dụ local và production).\n\nLaravel tích hợp sẵn `.dotenv` để giúp bạn làm thực hiện việc này dễ dàng nhất. Mỗi mỗi trường sẽ có 1 file `.env` ở thư mục gốc lưu các thông tin quan trọng.\n\nCách hoạt động của file `.env` rất đơn giản. Hãy mở file `/config/database.php` các bạn sẽ thấy dòng này :\n\n```php\n'mysql' => [\n  'driver'    => 'mysql',\n  'host'      => env('DB_HOST', 'localhost'),\n  'database'  => env('DB_DATABASE', 'forge'),\n  'username'  => env('DB_USERNAME', 'forge'),\n  'password'  => env('DB_PASSWORD', ''),\n  'charset'   => 'utf8',\n  'collation' => 'utf8_unicode_ci',\n  'prefix'    => '',\n  'strict'    => false,\n],\n```\n\nFile `.env` đi kèm sau khi cài Laravel thành công sẽ có nội dung như sau:\n\n```shell\nAPP_ENV=local\nAPP_DEBUG=true\nAPP_KEY=rTPeTeKYrhiu61RyvFeyGkbZF2KS2Fe2\n\nDB_HOST=localhost\nDB_DATABASE=homestead\nDB_USERNAME=homestead\nDB_PASSWORD=secret\n\nCACHE_DRIVER=file\nSESSION_DRIVER=file\n```\n\n*Lưu ý: Luôn luôn giữ bí mật APP_KEY của bạn*\n\nLaravel dùng hàm `env('DB_HOST', 'localhost')` để lấy giá trị `DB_HOST` trong file `.env`. Nếu không có giá trị này,  giá trị mặc định là `localhost` sẽ được dùng. Các bạn có thể bỏ trống biến thứ 2 của hàm `env` và khi đó giá trị mặc định trả về sẽ là `null`\n\n```php\n/**\n * Gets the value of an environment variable. Supports boolean, empty and null.\n *\n * @param  string  $key\n * @param  mixed   $default\n * @return mixed\n */\nfunction env($key, $default = null) {\n  // some thing here\n}\n```\n\nTrong file `.env` chúng ta sẽ cấu hình các mục\n\n```shell\nDB_HOST=localhost\nDB_DATABASE=gist\nDB_USERNAME=root\nDB_PASSWORD=\n```\n\nPhù hợp với cấu hình mysql của bạn. (nếu bạn sử dụng PostgreSQL, SQLite,...) Hãy thay đổi `default` cho phù hợp trong `config/database.php`\n\nKiểm tra kết nối database thành công bằng cách chạy lệnh sau vào Cmder\n\n```shell\nphp artisan tinker\n>>> DB::Statement(\"SHOW TABLES\")\ntrue\n```\n\n*Lưu ý: `SHOW TABLES` là câu lệnh của MySQL để hiển thị tất cả table trong database hiện tại (gist), nếu các bạn sử dụng các loại database khác. Câu lệnh này phải được thay đổi cho phù hợp*\n\n```php\nDB::Statement($command)\n```\n\nDùng để chạy một câu query.\n\n### Cài ide-helper package\n\nĐể các IDE có thể \"hiểu\" được những gì chúng ta đang code và có các type hint thì chúng ta cần cài package hỗ trợ. Ở đây mình sẽ dùng [barryvdh/laravel-ide-helper](https://github.com/barryvdh/laravel-ide-helper) .\n\nTrong Cmder:\n\n```shell\ncomposer require barryvdh/laravel-ide-helper --dev\n```\n\nOption --dev để composer hiểu chúng ta chỉ cần package này khi develop.\n\nMở file `'Gist\\Providers\\AppServiceProvider'` trong method `register()` chúng ta sẽ thêm vào :\n\n```php\nif ($this->app->environment() == 'local') {\n  $this->app->register('Barryvdh\\LaravelIdeHelper\\IdeHelperServiceProvider');\n}\n```\n\nTiếp tục trong Cmder:\n\n```shell\nphp artisan ide-helper:generate\n```\n\nLệnh trên sẽ tạo file _ide_helpers.php trong thư mục gốc giúp các IDE có thể hiểu được Laravel.\nBạn cần phải chạy lệnh trên mỗi lần cài đặt thêm package mới.\nNhưng bạn cài đặt package bằng Composer phải không?\nHãy để Composer làm điểu đó cho bạn.\n\nMở file `composer.json` và sửa `post-update-cmd` giống như bạn dưới (chính xác thứ tự các dòng nhé)\n\n```javascript\n\"post-update-cmd\":[\n  \"php artisan clear-compiled\",\n  \"php artisan ide-helper:generate\",\n  \"php artisan optimize\"\n]\n```\n\nCuối cùng là add file `_ide_helper.php` vào cuối file `.gitignore`  để cho git không theo dõi file này, tránh các rắc rối về commit/merge về sau.\n\n# Kết luận\n\nNếu bạn đọc được đến đây thì bạn đã sẵn sàng để chinh phục Laravel rồi đấy.\n","__filename":"larask-gist-cai-dat-va-cau-hinh-co-ban.md","__url":"/larask-gist-cai-dat-va-cau-hinh-co-ban/","__resourceUrl":"/larask-gist-cai-dat-va-cau-hinh-co-ban/index.html","__dataUrl":"/larask-gist-cai-dat-va-cau-hinh-co-ban/index.html.81560fa67ebffae0cab064aef45f3118.json"}